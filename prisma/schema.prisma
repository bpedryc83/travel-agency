// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Role {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Trip {
  id            String @id @default(uuid())
  title         String
  country       String 
  duration      Int
  price         Int
  maxPeopleAmount Int
  mainPhoto     String
  description   String @db.VarChar(1000)
  extraOptions  TripExtraOptions[]

  photos        tripPhoto[]
  orders        TripsOnOrders[]
}

model tripPhoto {
  id        String @id @default(uuid())
  photo     String

  trip      Trip? @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String?
}

model TripExtraOptions {
  id        String @id @default(uuid())
  name      String
  price     Int
  photo     String

  trip      Trip? @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String?
  order     Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String? 
}

model Order {
  id            String           @id @default(uuid())
  user          User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  remarks       String
  extraOptions  TripExtraOptions[]
  trips         TripsOnOrders[]

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}


model TripsOnOrders {
  trip          Trip @relation(fields: [tripId], references: [id])
  tripId        String
  order         Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  peopleAmount  Int

  @@id([tripId, orderId])
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  role      Role      @default(USER)
  password  Password?

  orders    Order[]
}

model Password {
  id       String @id @default(uuid())
  hashedPassword String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
}
